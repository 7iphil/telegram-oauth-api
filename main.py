from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import RedirectResponse, JSONResponse
from starlette.middleware.cors import CORSMiddleware
import os
import hashlib
import hmac

# üöÄ FastAPI App
app = FastAPI()

# üåê CORS (–æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ ‚Äî –º–æ–∂–µ—à—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ —Ö–æ—Å—Ç—É)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
REDIRECT_URL = os.getenv("REDIRECT_URL", "https://your-site.com")

# ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ Telegram
def verify_telegram_auth(data: dict) -> bool:
    auth_data = data.copy()
    hash_received = auth_data.pop("hash", "")
    auth_data = sorted([f"{k}={v}" for k, v in auth_data.items()])
    data_check_string = "\n".join(auth_data)

    secret_key = hmac.new(
        key=b"WebAppData",
        msg=BOT_TOKEN.encode(),
        digestmod=hashlib.sha256
    ).digest()

    calculated_hash = hmac.new(
        secret_key,
        data_check_string.encode(),
        hashlib.sha256
    ).hexdigest()

    return calculated_hash == hash_received

# üåê POST /auth
@app.post("/auth")
async def auth(request: Request):
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    if not verify_telegram_auth(data):
        raise HTTPException(status_code=403, detail="Invalid Telegram Auth")

    # üß† –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_id = data["id"]
    first_name = data.get("first_name", "")
    username = data.get("username", "")

    # üåç –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç (–º–æ–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ JWT)
    url = f"{REDIRECT_URL}?tg_id={user_id}&tg_name={first_name}&tg_username={username}"
    return RedirectResponse(url)

# üîç –î–ª—è —Ç–µ—Å—Ç–æ–≤
@app.get("/")
def index():
    return JSONResponse({"status": "ok", "bot_token": bool(BOT_TOKEN)})